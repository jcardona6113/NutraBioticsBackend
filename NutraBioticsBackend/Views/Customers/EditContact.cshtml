@model NutraBioticsBackend.Models.Contact


<h2>@Html.DisplayFor(model => model.Name)</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ContactId)


        <div class="form-group">
            @Html.Label("PerConID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PerConID, new { htmlAttributes = new { @id = "perid", @class = "form-control" } })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.PerConID, "PerConID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("PerConID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PerConID, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.ConNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConNum, new { htmlAttributes = new {@readonly = "readonly", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShipToId, "ShipToId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ShipToId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ShipToId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PagerNum, "PagerNum", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PagerNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PagerNum, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.ShipToNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShipToNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ShipToNum, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.CustNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CustNum, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.Company, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.CountryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CountryId", null, htmlAttributes:new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PhoneNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.VendorId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.VendorId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.VendorId, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.SincronizadoEpicor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.SincronizadoEpicor)
                    @Html.ValidationMessageFor(model => model.SincronizadoEpicor, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-Nutra" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Regresar", "EditShipTo"+"/"+Model.ShipToId)
</div>

@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>



<script type="text/javascript">
    $(document).ready(function () {
    $("#perid").autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("PerConIDAutoComplete")',
                type: "POST",
                dataType: "json",
                data: { Prefix: parseInt(request.term), __RequestVerificationToken: $('input[name=__RequestVerificationToken]').val() },
                success: function (data) {
                    response($.map(data, function (item) {
                        return { label: item.PerConID, value: item.PerConID };
                    }))
                }
            })
        },
        messages: {
            noResults: "", results: ""
        }
    });
})


$(document).ready(function () {
    $("#perid").focusout(function () {
        $.ajax({
            url: '@Url.Action("SelectPerConIDFromTextBox")',
            dataType: 'json',
            type: "POST",
            data: {
                PerConId: $("#perid").val(), __RequestVerificationToken: $('input[name=__RequestVerificationToken]').val()
            },
            success: function (perconid) {
                if (perconid.PerConID == 999) {
                    alert("No Encontrado");
                }
                else {
                    $("#PerConID").val(perconid.PerConID);
                }
            },
        });
        return false;
    })
})


$(document).ready(function () {
    $("#PerConID").change(function () {
        $("#perid").empty();
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetPersonContactData")',
            dataType: 'json',
            data: { PerConID: $("#PerConID").val(), __RequestVerificationToken: $('input[name=__RequestVerificationToken]').val()},
            success: function (perconid) {
                $.each(perconid, function (i, percon) {
                    $("#perid").prop("value", percon.PerConID);
                    $("#Name").prop("value", percon.Name);
                    $("#Email").prop("value", percon.Email);
                });
            },
        });

        return false;
    })
    })


    $(document).ready(function () {
        $("#ShipToId").change(function () {
            $("#cedulaSH").empty();
            $.ajax({
                type: 'POST',
                url: "GetShipToeData",
                dataType: 'json',
                data: { ShipToId: $("#ShipToId").val() },
                success: function (shiptoes) {
                    $.each(shiptoes, function (i, shipto) {
                        $("#cedulaSH").prop("value", shipto.ShipToNum);
                    });
                },
            });

            return false;
        })
    })





</script>





}
