@model NutraBioticsBackend.Models.ShipToView
@using GridMvc.Html

@{
    ViewBag.Title = "Editar Sucursal";
}

<h2>@Html.DisplayFor(model => model.ShipToName)</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ShipToId)

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerId, "CustomerId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CustomerId", null, htmlAttributes: new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShipToNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShipToNum, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ShipToNum, "", new {  @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.CustNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CustNum, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.Company, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.ShipToName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShipToName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ShipToName, "", new { @class = "text-danger" })
            </div>
        </div>


        @*<div class="form-group">
            @Html.LabelFor(model => model.CountryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CountryId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.CountryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CountryId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.TerritoryEpicorId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TerritoryEpicorId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TerritoryEpicorId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PhoneNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.VendorId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.VendorId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.VendorId, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.SincronizadoEpicor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.SincronizadoEpicor)
                    @Html.ValidationMessageFor(model => model.SincronizadoEpicor, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-Nutra" />
            </div>
        </div>
    </div>


    <div>

        <h3>Contactos</h3>


        @Html.ActionLink("Crear Contacto", "CreateContact",
                        new { Id = Model.ShipToId }, new { @class = "btn btn-Nutra" })

        @if (Model.Contacts.Count > 0)
        {

            @Html.Grid(Model.Contacts).Named("ContactsGrid").Columns(columns =>
       {
           columns.Add(c => c.ConNum).Titled("ConNum").SetWidth(110).Sortable(true).Filterable(true);

           columns.Add(c => c.Name).Titled("Nombre").SetWidth(110).Sortable(true).Filterable(true);

           columns.Add(c => c.Country).Titled("Country").SetWidth(110).Filterable(true).Sortable(true);

           columns.Add(c => c.State).Titled("State").SetWidth(110).Filterable(true).Sortable(true);

           columns.Add(c => c.City).Titled("City").SetWidth(110).Filterable(true).Sortable(true);

           columns.Add(c => c.Address).Titled("Address").SetWidth(110).Filterable(true).Sortable(true);

           columns.Add(c => c.Email).Titled("Email").SetWidth(110).Filterable(true).Sortable(true);

           columns.Add().Encoded(false).Sanitized(false).SetWidth(5)
           .RenderValueAs(o => @Html.ActionLink("Editar", "EditContact", new { id = o.ShipToId }, new { @class = "btn btn-Nutra" }));

           columns.Add().Encoded(false).Sanitized(false).SetWidth(5)
       .RenderValueAs(o => @Html.ActionLink("Borrar", "DeleteContact", new { id = o.ShipToId }));

       }).WithPaging(20)

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
                <script src="@Url.Content("~/Scripts/jquery.min.js")" type="text/javascript"></script>
                <script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>

       }
        }

        else
        {
          <h4> No se encontraron contactos </h4>
                }
    </div >

    <p>
        @Html.ActionLink("Regresar", "Details" + "/" + Model.CustomerId)
    </p>

}


