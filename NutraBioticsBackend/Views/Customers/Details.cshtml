@model NutraBioticsBackend.Models.CustomerView
@using GridMvc.Html

@{
    ViewBag.Title = "Detalle";
}

<h2>@Html.DisplayFor(model => model.Names)</h2>

<div>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <hr />


    <div class="form-horizontal">
        <div class="col-md-6">


            <div class="form-group">
                @Html.LabelFor(model => model.CustNum, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CustNum, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CustNum, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Names, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Names, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Names, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Company, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.TermsCode, "TermsCode", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.TermsCode, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control", id = "TermsCode" } })
                    @Html.ValidationMessageFor(model => model.TermsCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreditHold, "CreditHold", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.CreditHold)
                        @Html.ValidationMessageFor(model => model.CreditHold, "", new { @readonly = "readonly", @class = "text-danger" })
                    </div>
                </div>
            </div>


            <br />
            <hr />
                <h3>Sucursales</h3>
                @Html.ActionLink("Crear ShipTo", "CreateShipTo",
                        new { Id = Model.CustomerId }, new { @class = "btn btn-Nutra" })

            </div>




        <div class="col-md-6">


            <div class="form-group">
                @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.State, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
            </div>




            <div class="form-group">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
            </div>


        </div>


        </div>
</div>

<div>

@if (Model.ShipTos.Count > 0)
{


    @Html.Grid(Model.ShipTos).Named("ShipToesGrid").Columns(columns =>
{
    columns.Add(c => c.ShipToNum).Titled("ShipToNum").SetWidth(110).Sortable(true).Filterable(true);

    columns.Add(c => c.ShipToName).Titled("Nombre").SetWidth(110).Sortable(true).Filterable(true);

    columns.Add(c => c.Country).Titled("Country").SetWidth(110).Sortable(true).Filterable(true);

    columns.Add(c => c.State).Titled("State").SetWidth(110).Filterable(true).Sortable(true);

    columns.Add(c => c.City).Titled("City").SetWidth(110).Sortable(true).Filterable(true);

    columns.Add(c => c.Address).Titled("Address").SetWidth(110).Sortable(true).Filterable(true);

    columns.Add(c => c.SincronizadoEpicor).Encoded(false).Sanitized(false).SetWidth(30).Titled("Sincronizado Epicor").Filterable(true).RenderValueAs(o => Html.CheckBox("checked", o.SincronizadoEpicor, new { @disabled = true }));


    columns.Add().Encoded(false).Sanitized(false).SetWidth(5)
    .RenderValueAs(o => @Html.ActionLink("Editar", "EditShipTo", new { id = o.ShipToId }, new { @class = "btn btn-Nutra" }));

    columns.Add().Encoded(false).Sanitized(false).SetWidth(5)
.RenderValueAs(o => @Html.ActionLink("Borrar", "DeleteShipTo", new { id = o.ShipToId }));


    //columns.Add(c => c.CustNum).Titled("Pais").SetWidth(110);
    //columns.Add(c => c.CustNum).Sortable(true);

    //columns.Add(c => c.CustNum).Titled("Departamento").SetWidth(110);
    //columns.Add(c => c.CustNum).Sortable(true);

    //columns.Add(c => c.CustNum).Titled("Ciudad").SetWidth(110);
    //columns.Add(c => c.CustNum).Sortable(true);

    //columns.Add(c => c.CustNum).Titled("Direccion").SetWidth(110);
    //columns.Add(c => c.CustNum).Sortable(true);
}).WithPaging(20)

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        @*<script src="@Url.Content("~/Scripts/jquery.min.js")" type="text/javascript"></script>*@
        <script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>


    }
}
else
{
        <h4> No se encontraron sucursales </h4>
    }

</div>

<p>
    @Html.ActionLink("Regresar", "Index")
</p>
